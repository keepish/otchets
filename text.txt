using System;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Threading.Tasks;

namespace Task3
{
    class Program
    {
        private static string sourceDirectory = "";
        private static string mirrorDirectory = "";

        static async Task Main(string[] args)
        {
            Console.WriteLine("=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å - –ó–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ===");

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤
            InitializeDirectories();

            while (true)
            {
                Console.WriteLine("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                Console.WriteLine("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª");
                Console.WriteLine("2. –í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª");
                Console.WriteLine("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤");
                Console.WriteLine("4. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤");
                Console.WriteLine("5. –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∏");
                Console.WriteLine("6. –í—ã–π—Ç–∏");
                
                var choice = Console.ReadLine();
                
                switch (choice)
                {
                    case "1":
                        await UploadFile();
                        break;
                    case "2":
                        await DownloadFile();
                        break;
                    case "3":
                        await VerifyFilesIntegrity();
                        break;
                    case "4":
                        ShowFileList();
                        break;
                    case "5":
                        InitializeDirectories(true);
                        break;
                    case "6":
                        return;
                    default:
                        Console.WriteLine("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
                        break;
                }
            }
        }

        static void InitializeDirectories(bool forceReenter = false)
        {
            if (!forceReenter && !string.IsNullOrEmpty(sourceDirectory) && Directory.Exists(sourceDirectory))
                return;

            if (forceReenter || string.IsNullOrEmpty(sourceDirectory))
            {
                Console.Write("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É: ");
                sourceDirectory = Console.ReadLine();
            }

            if (forceReenter || string.IsNullOrEmpty(mirrorDirectory))
            {
                Console.Write("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É: ");
                mirrorDirectory = Console.ReadLine();
            }

            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            try
            {
                Directory.CreateDirectory(sourceDirectory);
                Directory.CreateDirectory(mirrorDirectory);
                Console.WriteLine($"‚úÖ –ö–∞—Ç–∞–ª–æ–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:");
                Console.WriteLine($"   –û—Å–Ω–æ–≤–Ω–æ–π: {sourceDirectory}");
                Console.WriteLine($"   –ó–µ—Ä–∫–∞–ª—å–Ω—ã–π: {mirrorDirectory}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {ex.Message}");
                sourceDirectory = mirrorDirectory = "";
                InitializeDirectories(true);
            }
        }

        static async Task UploadFile()
        {
            InitializeDirectories();

            Console.Write("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ");
            string filePath = Console.ReadLine();

            if (!File.Exists(filePath))
            {
                Console.WriteLine("‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                return;
            }

            string fileName = Path.GetFileName(filePath);
            string sourceFilePath = Path.Combine(sourceDirectory, fileName);
            string mirrorFilePath = Path.Combine(mirrorDirectory, fileName);

            try
            {
                // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –æ–±–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
                File.Copy(filePath, sourceFilePath, true);
                File.Copy(filePath, mirrorFilePath, true);

                // –°–æ–∑–¥–∞–µ–º —á–µ–∫-—Å—É–º–º—ã
                string sourceChecksum = await CalculateChecksum(sourceFilePath);
                string mirrorChecksum = await CalculateChecksum(mirrorFilePath);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫-—Å—É–º–º—ã
                await File.WriteAllTextAsync(sourceFilePath + ".checksum", sourceChecksum);
                await File.WriteAllTextAsync(mirrorFilePath + ".checksum", mirrorChecksum);

                Console.WriteLine($"‚úÖ –§–∞–π–ª '{fileName}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω");
                Console.WriteLine($"   –ß–µ–∫-—Å—É–º–º–∞: {sourceChecksum}");
                Console.WriteLine($"   –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥: {sourceFilePath}");
                Console.WriteLine($"   –ó–µ—Ä–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: {mirrorFilePath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {ex.Message}");
            }
        }

        static async Task DownloadFile()
        {
            InitializeDirectories();

            var files = GetAvailableFiles();
            if (files.Length == 0)
            {
                Console.WriteLine("üìÅ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                return;
            }

            Console.WriteLine("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:");
            for (int i = 0; i < files.Length; i++)
            {
                Console.WriteLine($"{i + 1}. {files[i]}");
            }

            Console.Write("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏: ");
            if (!int.TryParse(Console.ReadLine(), out int fileIndex) || fileIndex < 1 || fileIndex > files.Length)
            {
                Console.WriteLine("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
                return;
            }

            string fileName = files[fileIndex - 1];
            string sourceFilePath = Path.Combine(sourceDirectory, fileName);
            string mirrorFilePath = Path.Combine(mirrorDirectory, fileName);

            Console.Write("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ");
            string destinationPath = Console.ReadLine();

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫-—Å—É–º–º—ã
                var (sourceValid, mirrorValid, sourceChecksum, mirrorChecksum) = await VerifyFileIntegrity(fileName);

                Console.WriteLine($"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ '{fileName}':");
                Console.WriteLine($"   –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: {(sourceValid ? "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π" : "‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω")}");
                Console.WriteLine($"   –ó–µ—Ä–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {(mirrorValid ? "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π" : "‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω")}");

                string fileToCopy = sourceValid ? sourceFilePath : mirrorValid ? mirrorFilePath : null;

                if (fileToCopy == null)
                {
                    Console.WriteLine("‚ùå –û–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã! –í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞");
                    return;
                }

                if (!sourceValid && mirrorValid)
                {
                    Console.WriteLine("‚ö†Ô∏è  –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–∑ –∑–µ—Ä–∫–∞–ª–∞...");
                    File.Copy(mirrorFilePath, sourceFilePath, true);
                    await File.WriteAllTextAsync(sourceFilePath + ".checksum", mirrorChecksum);
                    Console.WriteLine("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                }

                File.Copy(fileToCopy, destinationPath, true);
                Console.WriteLine($"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω –≤: {destinationPath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {ex.Message}");
            }
        }

        static async Task VerifyFilesIntegrity()
        {
            InitializeDirectories();

            Console.WriteLine("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤...");

            var files = GetAvailableFiles();
            if (files.Length == 0)
            {
                Console.WriteLine("üìÅ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                return;
            }

            int corruptedFiles = 0;
            int healthyFiles = 0;

            foreach (var fileName in files)
            {
                var (sourceValid, mirrorValid, _, _) = await VerifyFileIntegrity(fileName);
                
                if (sourceValid && mirrorValid)
                {
                    Console.WriteLine($"‚úÖ {fileName}: –æ–±–∞ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã");
                    healthyFiles++;
                }
                else if (!sourceValid && !mirrorValid)
                {
                    Console.WriteLine($"‚ùå {fileName}: –æ–±–∞ —Ñ–∞–π–ª–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã");
                    corruptedFiles++;
                }
                else if (!sourceValid)
                {
                    Console.WriteLine($"‚ö†Ô∏è  {fileName}: –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –∑–µ—Ä–∫–∞–ª–æ OK");
                    corruptedFiles++;
                }
                else
                {
                    Console.WriteLine($"‚ö†Ô∏è  {fileName}: –∑–µ—Ä–∫–∞–ª–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ, –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª OK");
                    corruptedFiles++;
                }
            }

            Console.WriteLine($"\nüìä –ò—Ç–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:");
            Console.WriteLine($"   –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {healthyFiles}");
            Console.WriteLine($"   –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {corruptedFiles}");
            Console.WriteLine($"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {files.Length}");

            if (corruptedFiles > 0)
            {
                Console.WriteLine("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤");
            }
        }

        static void ShowFileList()
        {
            InitializeDirectories();

            var files = GetAvailableFiles();
            if (files.Length == 0)
            {
                Console.WriteLine("üìÅ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                return;
            }

            Console.WriteLine($"\nüìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ({files.Length} —Ñ–∞–π–ª–æ–≤):");
            foreach (var file in files)
            {
                string filePath = Path.Combine(sourceDirectory, file);
                FileInfo info = new FileInfo(filePath);
                Console.WriteLine($"   üìÑ {file} ({info.Length} bytes)");
            }
        }

        static string[] GetAvailableFiles()
        {
            return Directory.GetFiles(sourceDirectory)
                .Where(f => !f.EndsWith(".checksum"))
                .Select(f => Path.GetFileName(f))
                .ToArray();
        }

        static async Task<(bool sourceValid, bool mirrorValid, string sourceChecksum, string mirrorChecksum)> 
            VerifyFileIntegrity(string fileName)
        {
            string sourceFilePath = Path.Combine(sourceDirectory, fileName);
            string mirrorFilePath = Path.Combine(mirrorDirectory, fileName);
            string sourceChecksumFile = sourceFilePath + ".checksum";
            string mirrorChecksumFile = mirrorFilePath + ".checksum";

            if (!File.Exists(sourceFilePath) || !File.Exists(mirrorFilePath))
                return (false, false, "", "");

            string sourceChecksum = await CalculateChecksum(sourceFilePath);
            string mirrorChecksum = await CalculateChecksum(mirrorFilePath);

            string storedSourceChecksum = File.Exists(sourceChecksumFile) ? 
                await File.ReadAllTextAsync(sourceChecksumFile) : "";
            string storedMirrorChecksum = File.Exists(mirrorChecksumFile) ? 
                await File.ReadAllTextAsync(mirrorChecksumFile) : "";

            bool sourceValid = sourceChecksum == storedSourceChecksum;
            bool mirrorValid = mirrorChecksum == storedMirrorChecksum;

            return (sourceValid, mirrorValid, sourceChecksum, mirrorChecksum);
        }

        static async Task<string> CalculateChecksum(string filePath)
        {
            using var sha256 = SHA256.Create();
            using var fileStream = File.OpenRead(filePath);
            byte[] hashBytes = await sha256.ComputeHashAsync(fileStream);
            return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
        }
    }
}